From: Sean Finney <seanius@debian.org>
Date: Sun, 4 Dec 2011 07:58:33 +0100
Subject: errors_to_stderr

send errors to stderr, where they belong
---
 src/netutils.c  | 14 +++++++-------
 src/nsca.c      |  2 +-
 src/send_nsca.c | 18 +++++++++---------
 3 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/src/netutils.c b/src/netutils.c
index 75ff7ca..5617a34 100644
--- a/src/netutils.c
+++ b/src/netutils.c
@@ -61,7 +61,7 @@ int my_connect(char *host_name,int port,int *sd,char *proto){
 		/* else do a DNS lookup */
 		hp=gethostbyname((const char *)host_name);
 		if(hp==NULL){
-			printf("Invalid host name '%s'\n",host_name);
+			fprintf(stderr, "Invalid host name '%s'\n",host_name);
 			return STATE_UNKNOWN;
 		        }
 
@@ -70,14 +70,14 @@ int my_connect(char *host_name,int port,int *sd,char *proto){
 
 	/* map transport protocol name to protocol number */
 	if(((ptrp=getprotobyname(proto)))==NULL){
-		printf("Cannot map \"%s\" to protocol number\n",proto);
+		fprintf(stderr, "Cannot map \"%s\" to protocol number\n",proto);
 		return STATE_UNKNOWN;
 	        }
 
 	/* create a socket */
 	*sd=socket(PF_INET,(!strcmp(proto,"udp"))?SOCK_DGRAM:SOCK_STREAM,ptrp->p_proto);
 	if(*sd<0){
-		printf("Socket creation failed\n");
+		fprintf(stderr, "Socket creation failed\n");
 		return STATE_UNKNOWN;
 	        }
 
@@ -86,16 +86,16 @@ int my_connect(char *host_name,int port,int *sd,char *proto){
 	if(result<0){
 		switch(errno){  
 		case ECONNREFUSED:
-			printf("Connection refused by host\n");
+			fprintf(stderr, "Connection refused by host\n");
 			break;
 		case ETIMEDOUT:
-			printf("Timeout while attempting connection\n");
+			fprintf(stderr, "Timeout while attempting connection\n");
 			break;
 		case ENETUNREACH:
-			printf("Network is unreachable\n");
+			fprintf(stderr, "Network is unreachable\n");
 			break;
 		default:
-			printf("Connection refused or timed out\n");
+			fprintf(stderr, "Connection refused or timed out\n");
 		        }
 
 		return STATE_CRITICAL;
diff --git a/src/nsca.c b/src/nsca.c
index 2725eb2..d406fb0 100644
--- a/src/nsca.c
+++ b/src/nsca.c
@@ -92,7 +92,7 @@ int main(int argc, char **argv){
         if(result!=OK || show_help==TRUE || show_license==TRUE || show_version==TRUE){
 
 		if(result!=OK)
-			printf("Incorrect command line arguments supplied\n");
+			fprintf(stderr, "Incorrect command line arguments supplied\n");
                 printf("\n");
                 printf("NSCA - Nagios Service Check Acceptor\n");
 		printf("Copyright (c) 2009 Nagios Core Development Team and Community Contributors\n");
diff --git a/src/send_nsca.c b/src/send_nsca.c
index b329cb4..d247a7d 100644
--- a/src/send_nsca.c
+++ b/src/send_nsca.c
@@ -80,7 +80,7 @@ int main(int argc, char **argv){
 	if(result!=OK || show_help==TRUE || show_license==TRUE || show_version==TRUE){
 
 		if(result!=OK)
-			printf("Incorrect command line arguments supplied\n");
+			fprintf(stderr, "Incorrect command line arguments supplied\n");
 		printf("\n");
 		printf("NSCA Client %s\n",PROGRAM_VERSION);
 		printf("Copyright (c) 2000-2007 Ethan Galstad (www.nagios.org)\n");
@@ -134,7 +134,7 @@ int main(int argc, char **argv){
 
 	/* exit if there are errors... */
 	if(result==ERROR){
-		printf("Error: Config file '%s' contained errors...\n",config_file);
+		fprintf(stderr, "Error: Config file '%s' contained errors...\n",config_file);
 		do_exit(STATE_CRITICAL);
 		}
 
@@ -154,7 +154,7 @@ int main(int argc, char **argv){
 
 	/* we couldn't connect */
 	if(result!=STATE_OK){
-		printf("Error: Could not connect to host %s on port %d\n",server_name,server_port);
+		fprintf(stderr, "Error: Could not connect to host %s on port %d\n",server_name,server_port);
 		do_exit(STATE_CRITICAL);
 	        }
 
@@ -165,7 +165,7 @@ int main(int argc, char **argv){
 	/* read the initialization packet containing the IV and timestamp */
 	result=read_init_packet(sd);
 	if(result!=OK){
-		printf("Error: Could not read init packet from server\n");
+		fprintf(stderr, "Error: Could not read init packet from server\n");
 		close(sd);
 		do_exit(STATE_CRITICAL);
 	        }
@@ -176,7 +176,7 @@ int main(int argc, char **argv){
 
 	/* initialize encryption/decryption routines with the IV we received from the server */
         if(encrypt_init(password,encryption_method,received_iv,&CI)!=OK){
-		printf("Error: Failed to initialize encryption libraries for method %d\n",encryption_method);
+		fprintf(stderr, "Error: Failed to initialize encryption libraries for method %d\n",encryption_method);
 		close(sd);
 		do_exit(STATE_CRITICAL);
 	        }
@@ -280,7 +280,7 @@ int main(int argc, char **argv){
 
 		/* there was an error sending the packet */
 		if(rc==-1){
-			printf("Error: Could not send data to host\n");
+			fprintf(stderr, "Error: Could not send data to host\n");
 			close(sd);
 			do_exit(STATE_UNKNOWN);
 	                }
@@ -353,13 +353,13 @@ int read_init_packet(int sock){
 
         /* recv() error or server disconnect */
         if(rc<=0){
-                printf("Error: Server closed connection before init packet was received\n");
+                fprintf(stderr, "Error: Server closed connection before init packet was received\n");
                 return ERROR;
                 }
 
         /* we couldn't read the correct amount of data, so bail out */
         else if(bytes_to_recv!=sizeof(receive_packet)){
-                printf("Error: Init packet from server was too short (%d bytes received, %d expected)\n",bytes_to_recv,sizeof(receive_packet));
+                fprintf(stderr, "Error: Init packet from server was too short (%d bytes received, %d expected)\n",bytes_to_recv,sizeof(receive_packet));
                 return ERROR;
                 }
 
@@ -468,7 +468,7 @@ int process_arguments(int argc, char **argv){
 /* handle timeouts */
 void alarm_handler(int sig){
 
-	printf("Error: Timeout after %d seconds\n",socket_timeout);
+	fprintf(stderr, "Error: Timeout after %d seconds\n",socket_timeout);
 
 	do_exit(STATE_CRITICAL);
         }
